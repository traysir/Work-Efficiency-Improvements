from datetime import datetime

class UPS:
    def __init__(self):
        self.packages = {}
        self.trucks = {}
        self.customers = {}

    def create_package(self, sender, receiver, weight):
        package_id = self.generate_package_id()
        new_package = {
            'sender': sender,
            'receiver': receiver,
            'weight': weight,
            'status': 'Created',
            'created_at': datetime.now(),
            'last_updated': datetime.now()
        }
        self.packages[package_id] = new_package
        return package_id

    def update_package_status(self, package_id, new_status):
        if package_id in self.packages:
            self.packages[package_id]['status'] = new_status
            self.packages[package_id]['last_updated'] = datetime.now()

    def assign_package_to_truck(self, package_id, truck_id):
        if package_id in self.packages and truck_id in self.trucks:
            self.packages[package_id]['status'] = 'In transit'
            self.packages[package_id]['last_updated'] = datetime.now()
            self.trucks[truck_id]['packages'].append(package_id)

    def generate_package_id(self):
        # Logic to generate a unique package ID
        pass

    # Additional methods for managing trucks, customers, tracking packages, generating reports, etc.
    # These might include functionalities to calculate optimal routes, manage package sorting, handle returns, etc.

# Sample Usage:
ups_system = UPS()

# Creating packages
package_id_1 = ups_system.create_package("Sender A", "Receiver X", 10)
package_id_2 = ups_system.create_package("Sender B", "Receiver Y", 5)

# Update package status
ups_system.update_package_status(package_id_1, 'Ready for pickup')

# Handling logistics
ups_system.assign_package_to_truck(package_id_1, 'Truck1')

# ... (further functionality would involve more complex operations and methods)

